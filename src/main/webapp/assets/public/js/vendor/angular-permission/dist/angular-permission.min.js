/*! meschola 2016-03-15 Buonaiuto Andrea - Parlato Luigi  */
!function(){"use strict";angular.module("permission",["ui.router"]).run(["$rootScope","Permission","$state","$q",function($rootScope,Permission,$state,$q){$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(!toState.$$finishAuthorize){var permissions;if(toState.data&&toState.data.permissions?permissions=toState.data.permissions:toState.permissions&&(console.log("Deprecation Warning: permissions should be set inside the `data` key "),console.log("Setting permissions for a state outside `data` will be depracated in version 1"),permissions=toState.permissions),permissions){if(event.preventDefault(),toState=angular.extend({$$finishAuthorize:!0},toState),$rootScope.$broadcast("$stateChangePermissionStart",toState,toParams).defaultPrevented)return;Permission.authorize(permissions,toParams).then(function(){$rootScope.$broadcast("$stateChangeStart",toState,toParams,fromState,fromParams).defaultPrevented||($rootScope.$broadcast("$stateChangePermissionAccepted",toState,toParams),$state.go(toState.name,toParams,{notify:!1}).then(function(){$rootScope.$broadcast("$stateChangeSuccess",toState,toParams,fromState,fromParams)}))},function(){if(!$rootScope.$broadcast("$stateChangeStart",toState,toParams,fromState,fromParams).defaultPrevented){$rootScope.$broadcast("$stateChangePermissionDenied",toState,toParams);var redirectTo=permissions.redirectTo;angular.isFunction(redirectTo)?(redirectTo=redirectTo(),$q.when(redirectTo).then(function(newState){newState&&$state.go(newState,toParams)})):redirectTo&&$state.go(redirectTo,toParams)}})}}})}])}(),function(){"use strict";angular.module("permission").provider("Permission",function(){var roleValidationConfig={},validateRoleDefinitionParams=function(roleName,validationFunction){if(!angular.isString(roleName))throw new Error("Role name must be a string");if(!angular.isFunction(validationFunction))throw new Error("Validation function not provided correctly")},validateManyRolesDefinitionParams=function(roles,validationFunction){if(!angular.isArray(roles))throw new Error("Roles must be an array");for(var i=0;i<roles.length;i++)validateRoleDefinitionParams(roles[i],validationFunction)};this.defineRole=function(roleName,validationFunction){return validateRoleDefinitionParams(roleName,validationFunction),roleValidationConfig[roleName]=validationFunction,this},this.$get=["$q",function($q){var Permission={_promiseify:function(value){if(value&&angular.isFunction(value.then))return value;var deferred=$q.defer();return value?deferred.resolve():deferred.reject(),deferred.promise},_validateRoleMap:function(roleMap){if("object"!=typeof roleMap||roleMap instanceof Array)throw new Error("Role map has to be an object");if(void 0===roleMap.only&&void 0===roleMap.except)throw new Error('Either "only" or "except" keys must me defined');if(roleMap.only){if(!(roleMap.only instanceof Array))throw new Error("Array of roles expected")}else if(roleMap.except&&!(roleMap.except instanceof Array))throw new Error("Array of roles expected")},_findMatchingRole:function(rolesArray,toParams){var roles=angular.copy(rolesArray),deferred=$q.defer(),currentRole=roles.shift();if(!currentRole)return deferred.reject(),deferred.promise;if(!angular.isFunction(Permission.roleValidations[currentRole]))throw new Error("undefined role or invalid role validation");var validatingRole=Permission.roleValidations[currentRole](toParams,currentRole);return validatingRole=Permission._promiseify(validatingRole),validatingRole.then(function(){deferred.resolve()},function(){Permission._findMatchingRole(roles,toParams).then(function(){deferred.resolve()},function(){deferred.reject()})}),deferred.promise},defineRole:function(roleName,validationFunction){return validateRoleDefinitionParams(roleName,validationFunction),roleValidationConfig[roleName]=validationFunction,Permission},defineManyRoles:function(roles,validationFunction){validateManyRolesDefinitionParams(roles,validationFunction);for(var definedPermissions=Permission,i=0;i<roles.length;i++)definedPermissions=definedPermissions.defineRole(roles[i],validationFunction);return definedPermissions},resolveIfMatch:function(rolesArray,toParams){var roles=angular.copy(rolesArray),deferred=$q.defer();return Permission._findMatchingRole(roles,toParams).then(function(){deferred.resolve()},function(){deferred.reject()}),deferred.promise},rejectIfMatch:function(roles,toParams){var deferred=$q.defer();return Permission._findMatchingRole(roles,toParams).then(function(){deferred.reject()},function(){deferred.resolve()}),deferred.promise},roleValidations:roleValidationConfig,authorize:function(roleMap,toParams){Permission._validateRoleMap(roleMap);var authorizing;return authorizing=roleMap.only?Permission.resolveIfMatch(roleMap.only,toParams):Permission.rejectIfMatch(roleMap.except,toParams)}};return Permission}]})}();